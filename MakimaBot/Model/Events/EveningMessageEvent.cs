using System.Globalization;
using Telegram.Bot;

namespace MakimaBot.Model.Events;

public class EveningMessageEvent : IChatEvent
{
    private readonly TimeSpan _eveningTimeStartUtc =
        DateTime.Parse("2023-01-01 20:30:00", CultureInfo.InvariantCulture).TimeOfDay;

    private readonly TimeSpan _eveningTimeEndUtc =
        DateTime.Parse("2023-01-01 22:30:00", CultureInfo.InvariantCulture).TimeOfDay;

    public async Task HandleEventAsync(TelegramBotClient telegramBotClient, ChatState chat)
    {
        await telegramBotClient.SendTextMessageAsync(
                chatId: chat.ChatId,
                text: GetRandomMessage());

        chat.EventsState.EveningMessage.LastTimeStampUtc = DateTime.UtcNow;
        chat.EventsState.EveningMessage.NextStartTimeStampUtc = GetNextStartTimeStampUtc();
    }

    public bool ShouldLaunch(ChatState chat)
    {
        var currentDateTimeUtc = DateTime.UtcNow;

        return chat.EventsState.EveningMessage.IsEnabled
               && currentDateTimeUtc.Date != chat.EventsState.EveningMessage.LastTimeStampUtc.Date
               && currentDateTimeUtc.TimeOfDay > _eveningTimeStartUtc
               && currentDateTimeUtc.TimeOfDay < _eveningTimeEndUtc
               && currentDateTimeUtc.TimeOfDay > chat.EventsState.EveningMessage.NextStartTimeStampUtc.TimeOfDay;
    }

    public DateTime GetNextStartTimeStampUtc()
    {
        var random = new Random();
        var startTicks = _eveningTimeStartUtc.Ticks;
        var endTicks = _eveningTimeEndUtc.Ticks - TimeSpan.FromMinutes(30).Ticks;
        var randomTicks = startTicks + (long)((endTicks - startTicks) * random.NextDouble());
        var timeOfDay = TimeSpan.FromTicks(randomTicks);

        return DateTime.UtcNow.Date.AddDays(1).Add(timeOfDay);
    }

    private string GetRandomMessage()
    {
        var random = new Random();

        return _eveningMessages[random.Next(0, _eveningMessages.Length)];
    }

    private readonly string[] _eveningMessages = {
        "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –ø—É—Å—Ç—å —Å–Ω—ã –±—É–¥—É—Ç –≤–æ–ª—à–µ–±–Ω—ã–º–∏ üåô‚ú®",
        "–ù–æ—á—å –æ–∫—É—Ç–∞–ª–∞ –º–∏—Ä —Å–≤–æ–∏–º —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ–º. –°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤! üåå",
        "Good night, sleep tight, and dream of wonderful things üåúüí´",
        "–ü—É—Å—Ç—å –Ω–æ—á—å –ø—Ä–∏–Ω–µ—Å–µ—Ç —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∏ –æ—Ç–¥—ã—Ö. –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! üåü",
        "–°–ª–∞–¥–∫–∏—Ö –∏ —Å–ø–æ–∫–æ–π–Ω—ã—Ö —Å–Ω–æ–≤, –ø—É—Å—Ç—å –Ω–æ—á—å –±—É–¥–µ—Ç —É—é—Ç–Ω–æ–π üò¥üí§",
        "–ó–∞–∫—Ä—ã–≤–∞–π –≥–ª–∞–∑–∞ –∏ –ø–æ–≥—Ä—É–∂–∞–π—Å—è –≤ –º–∏—Ä —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π. –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! üí§üåô",
        "–ù–æ—á–Ω–∞—è —Ç–∏—à–∏–Ω–∞ –∏ –∑–≤–µ–∑–¥—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—Ç –≤–∞—à —Å–æ–Ω. –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –¥–æ—Ä–æ–≥–∏–µ! üå†"
    };
}
